diff --git a/content/themes/casper/default.hbs b/content/themes/casper/default.hbs
index 7cc70e3..d553b7d 100644
--- a/content/themes/casper/default.hbs
+++ b/content/themes/casper/default.hbs
@@ -17,6 +17,11 @@
     it should always be the last tag before the closing head tag --}}
     {{ghost_head}}
 
+    {{!-- PWA --}}
+    <link rel="manifest" href="/manifest.webmanifest">
+    <meta name="theme-color" content="#0075FF">
+    <link rel="apple-touch-icon" href="/assets/icons/ghost-4.png">
+
 </head>
 <body class="{{body_class}}">
 <div class="viewport">
@@ -98,6 +103,15 @@ $(document).ready(function () {
 });
 </script>
 
+{{!-- Service Worker for PWA --}}
+<script>
+if ('serviceWorker' in navigator) {
+    window.addEventListener('load', () => {
+    navigator.serviceWorker.register('/sw.js');
+    });
+}
+</script>
+
 {{!-- Ghost outputs required functional scripts with this tag - it should always be the last thing before the closing body tag --}}
 {{ghost_foot}}
 
diff --git a/content/themes/casper/manifest.webmanifest b/content/themes/casper/manifest.webmanifest
new file mode 100644
index 0000000..855831c
--- /dev/null
+++ b/content/themes/casper/manifest.webmanifest
@@ -0,0 +1,17 @@
+{
+    "name":"sbctricks.com",
+    "short_name":"SBC Tricks",
+    "description":"Bite-sized programming tips",
+    "lang":"en",
+    "start_url":"/",
+    "background_color":"#ffffff",
+    "display":"fullscreen",
+    "theme_color":"#0075FF",
+    "icons":[
+       {
+        "src": "/assets/icons/ghost-4.png",
+        "type": "image/png",
+        "sizes": "200x200"
+      }
+    ]
+}
diff --git a/content/themes/casper/sw.js b/content/themes/casper/sw.js
new file mode 100644
index 0000000..0a87603
--- /dev/null
+++ b/content/themes/casper/sw.js
@@ -0,0 +1,63 @@
+const PRECACHE = 'precache';
+const RUNTIME = 'runtime';
+
+// A list of local resources we always want to be cached.
+const PRECACHE_URLS = [
+  '/',
+  '/offline/'
+];
+
+const OFFLINE_URL = [
+  '/offline/'
+]
+
+// The install handler takes care of pre caching the resources we always need.
+self.addEventListener('install', event => {
+  event.waitUntil(
+    caches.open(PRECACHE)
+      .then(cache => cache.addAll(PRECACHE_URLS))
+      .then(self.skipWaiting())
+  );
+});
+
+// The activate handler takes care of cleaning up old caches.
+self.addEventListener('activate', event => {
+  const currentCaches = [PRECACHE, RUNTIME];
+  event.waitUntil(
+    caches.keys().then(cacheNames => {
+      return cacheNames.filter(cacheName => !currentCaches.includes(cacheName));
+    }).then(cachesToDelete => {
+      return Promise.all(cachesToDelete.map(cacheToDelete => {
+        return caches.delete(cacheToDelete);
+      }));
+    }).then(() => self.clients.claim())
+  );
+});
+
+// The fetch handler serves responses for same-origin resources from a cache.
+// If no response is found, it populates the runtime cache with the response
+// from the network before returning it to the page.
+self.addEventListener('fetch', event => {
+  // Skip cross-origin requests, like those for Google Analytics.
+  if (event.request.url.startsWith(self.location.origin)) {
+    event.respondWith(
+      caches.match(event.request).then(cachedResponse => {
+        if (cachedResponse) {
+          return cachedResponse;
+        }
+
+        return caches.open(RUNTIME).then(cache => {
+          return fetch(event.request).then(response => {
+            // Put a copy of the response in the runtime cache.
+            return cache.put(event.request, response.clone()).then(() => {
+              return response;
+            });
+          }).catch(error => {
+            // Check if the user is offline first and is trying to navigate to a web page
+            return caches.match(OFFLINE_URL);
+          });;
+        });
+      })
+    );
+  }
+});
